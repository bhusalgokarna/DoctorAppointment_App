// <auto-generated />
using System;
using DoctorAppointment.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DoctorAppointment.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DoctorAppointment.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Adress");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Sandikharkha",
                            Country = "Nepal",
                            PostCode = "2123",
                            StreetName = "MilanChok"
                        });
                });

            modelBuilder.Entity("DoctorAppointment.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DateSlotId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("TimeSlotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DateSlotId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TimeSlotId");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("DoctorAppointment.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("DoctorAppointment.Models.DateSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AvailableDay")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DateSlot");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableDay = "18.09.2023",
                            DoctorId = 1
                        },
                        new
                        {
                            Id = 2,
                            AvailableDay = "18.09.2023",
                            DoctorId = 2
                        },
                        new
                        {
                            Id = 3,
                            AvailableDay = "18.09.2023",
                            DoctorId = 3
                        },
                        new
                        {
                            Id = 4,
                            AvailableDay = "18.09.2023",
                            DoctorId = 4
                        },
                        new
                        {
                            Id = 5,
                            AvailableDay = "18.09.2023",
                            DoctorId = 5
                        },
                        new
                        {
                            Id = 6,
                            AvailableDay = "19.09.2023",
                            DoctorId = 6
                        },
                        new
                        {
                            Id = 7,
                            AvailableDay = "19.09.2023",
                            DoctorId = 7
                        },
                        new
                        {
                            Id = 8,
                            AvailableDay = "19.09.2023",
                            DoctorId = 1
                        },
                        new
                        {
                            Id = 9,
                            AvailableDay = "20.09.2023",
                            DoctorId = 1
                        },
                        new
                        {
                            Id = 10,
                            AvailableDay = "19.09.2023",
                            DoctorId = 2
                        },
                        new
                        {
                            Id = 11,
                            AvailableDay = "18.09.2023",
                            DoctorId = 3
                        },
                        new
                        {
                            Id = 12,
                            AvailableDay = "19.09.2023",
                            DoctorId = 4
                        },
                        new
                        {
                            Id = 13,
                            AvailableDay = "19.09.2023",
                            DoctorId = 5
                        },
                        new
                        {
                            Id = 14,
                            AvailableDay = "20.09.2023",
                            DoctorId = 6
                        },
                        new
                        {
                            Id = 15,
                            AvailableDay = "20.09.2023",
                            DoctorId = 7
                        },
                        new
                        {
                            Id = 16,
                            AvailableDay = "18.09.2023",
                            DoctorId = 8
                        },
                        new
                        {
                            Id = 17,
                            AvailableDay = "18.09.2023",
                            DoctorId = 8
                        },
                        new
                        {
                            Id = 18,
                            AvailableDay = "18.09.2023",
                            DoctorId = 9
                        },
                        new
                        {
                            Id = 19,
                            AvailableDay = "20.09.2023",
                            DoctorId = 9
                        },
                        new
                        {
                            Id = 20,
                            AvailableDay = "21.09.2023",
                            DoctorId = 6
                        });
                });

            modelBuilder.Entity("DoctorAppointment.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("HospitalInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("HospitalInfoId");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HospitalInfoId = 1,
                            Name = "Accident and Emergency Department (A & E)"
                        },
                        new
                        {
                            Id = 2,
                            HospitalInfoId = 1,
                            Name = "Intensive Care Unit (ICU)"
                        },
                        new
                        {
                            Id = 3,
                            HospitalInfoId = 1,
                            Name = "Pediatric"
                        },
                        new
                        {
                            Id = 4,
                            HospitalInfoId = 1,
                            Name = "Radiology"
                        },
                        new
                        {
                            Id = 5,
                            HospitalInfoId = 1,
                            Name = "General Surgery"
                        },
                        new
                        {
                            Id = 6,
                            HospitalInfoId = 1,
                            Name = "ENT"
                        });
                });

            modelBuilder.Entity("DoctorAppointment.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("HospitalInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UrlToPicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("GenreId");

                    b.HasIndex("HospitalInfoId");

                    b.ToTable("Doctor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2,
                            Email = "Jasper@gmail.com",
                            GenreId = 1,
                            HospitalInfoId = 1,
                            Name = "Jasper",
                            Phone = "+977-9856325689",
                            UrlToPicture = "Jasper.jpeg"
                        },
                        new
                        {
                            Id = 2,
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2,
                            Email = "Tiler@gmail.com",
                            GenreId = 1,
                            HospitalInfoId = 1,
                            Name = "Timerman",
                            Phone = "+977-9756325680",
                            UrlToPicture = "Timerman.jpeg"
                        },
                        new
                        {
                            Id = 3,
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1,
                            Email = "Umr@outlook.be",
                            GenreId = 1,
                            HospitalInfoId = 1,
                            Name = "Umer",
                            Phone = "+977-9656325254",
                            UrlToPicture = "Umer.jpeg"
                        },
                        new
                        {
                            Id = 4,
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 3,
                            Email = "Sneha@gmail.com",
                            GenreId = 2,
                            HospitalInfoId = 1,
                            Name = "Sneha",
                            Phone = "+977-9875325691",
                            UrlToPicture = "Sneha.jpeg"
                        },
                        new
                        {
                            Id = 5,
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 3,
                            Email = "Kristof@gmail.com",
                            GenreId = 3,
                            HospitalInfoId = 1,
                            Name = "Kristof",
                            Phone = "+977-1456325689",
                            UrlToPicture = "Kristof.jpeg"
                        },
                        new
                        {
                            Id = 6,
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 4,
                            Email = "Tomer@Yahoomail.com",
                            GenreId = 1,
                            HospitalInfoId = 1,
                            Name = "Tomar",
                            Phone = "+977-9856325689",
                            UrlToPicture = "Tomar.jpeg"
                        },
                        new
                        {
                            Id = 7,
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 5,
                            Email = "Iveta@gmail.com",
                            GenreId = 2,
                            HospitalInfoId = 1,
                            Name = "Iveta",
                            Phone = "+977-4856325632",
                            UrlToPicture = "Iveta.jpeg"
                        },
                        new
                        {
                            Id = 8,
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 6,
                            Email = "Roland@gmail.com",
                            GenreId = 1,
                            HospitalInfoId = 1,
                            Name = "Roland",
                            Phone = "+977-9756325645",
                            UrlToPicture = "Roland.jpeg"
                        },
                        new
                        {
                            Id = 9,
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 6,
                            Email = "Amanda@Yahoo.com",
                            GenreId = 2,
                            HospitalInfoId = 1,
                            Name = "Amanda",
                            Phone = "+977-9756325685",
                            UrlToPicture = "Amanda.jpeg"
                        });
                });

            modelBuilder.Entity("DoctorAppointment.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Gender = "Male"
                        },
                        new
                        {
                            Id = 2,
                            Gender = "Female"
                        },
                        new
                        {
                            Id = 3,
                            Gender = "Other"
                        });
                });

            modelBuilder.Entity("DoctorAppointment.Models.HospitalInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UrlToPicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("HospitalInfo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            Name = "Shandhikharkha Distric Hospital",
                            UrlToPicture = "Gangalal national heart center.jpeg"
                        });
                });

            modelBuilder.Entity("DoctorAppointment.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("HospitalInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("GenreId");

                    b.HasIndex("HospitalInfoId");

                    b.ToTable("Patient");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Bhddhanager 24,Kathmandu,Nepal",
                            DOB = new DateTime(1985, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 6,
                            DoctorId = 1,
                            GenreId = 1,
                            HospitalInfoId = 1,
                            Name = "Gokarna",
                            Nationality = "Nepalese"
                        },
                        new
                        {
                            Id = 2,
                            Address = "MaitiGhar 124,Kathmandu,Nepal",
                            DOB = new DateTime(2002, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 4,
                            DoctorId = 2,
                            GenreId = 1,
                            HospitalInfoId = 1,
                            Name = "DGSon",
                            Nationality = "Nepalese"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Sinamangal 68,Kathmandu,Nepal",
                            DOB = new DateTime(2018, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 3,
                            DoctorId = 3,
                            GenreId = 1,
                            HospitalInfoId = 1,
                            Name = "Paula",
                            Nationality = "Belgium"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Sinamangal 68,Kathmandu,Nepal",
                            DOB = new DateTime(2018, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 3,
                            DoctorId = 4,
                            GenreId = 2,
                            HospitalInfoId = 1,
                            Name = "Paula",
                            Nationality = "Belgium"
                        },
                        new
                        {
                            Id = 5,
                            Address = "MaitiGhar 124,Kathmandu,Nepal",
                            DOB = new DateTime(2002, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 4,
                            DoctorId = 5,
                            GenreId = 1,
                            HospitalInfoId = 1,
                            Name = "DGSon",
                            Nationality = "Nepalese"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Bhddhanager 24,Kathmandu,Nepal",
                            DOB = new DateTime(1985, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 6,
                            DoctorId = 6,
                            GenreId = 1,
                            HospitalInfoId = 1,
                            Name = "Gokarna",
                            Nationality = "Nepalese"
                        },
                        new
                        {
                            Id = 7,
                            Address = "NieuweStraat 120, Gent,Belgium",
                            DOB = new DateTime(1965, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 4,
                            DoctorId = 7,
                            GenreId = 1,
                            HospitalInfoId = 1,
                            Name = "Kenan",
                            Nationality = "Belgie"
                        },
                        new
                        {
                            Id = 8,
                            Address = "Donderlieuw 121,Belgium",
                            DOB = new DateTime(1994, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 3,
                            DoctorId = 8,
                            GenreId = 2,
                            HospitalInfoId = 1,
                            Name = "Anu",
                            Nationality = "Indian"
                        },
                        new
                        {
                            Id = 9,
                            Address = "GroteMarkt 220, Brussel,Belgium",
                            DOB = new DateTime(1980, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 3,
                            DoctorId = 9,
                            GenreId = 2,
                            HospitalInfoId = 1,
                            Name = "Sabrina",
                            Nationality = "Belgie"
                        },
                        new
                        {
                            Id = 10,
                            Address = "GentSeesteenweg 120, Gent,Belgium",
                            DOB = new DateTime(1985, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 4,
                            DoctorId = 1,
                            GenreId = 1,
                            HospitalInfoId = 1,
                            Name = "Rufat",
                            Nationality = "Azerbizan"
                        },
                        new
                        {
                            Id = 11,
                            Address = "Mechanlenlaan 85, Mechelen,Belgium",
                            DOB = new DateTime(1999, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2,
                            DoctorId = 2,
                            GenreId = 1,
                            HospitalInfoId = 1,
                            Name = "Jonas",
                            Nationality = "Belgie"
                        },
                        new
                        {
                            Id = 12,
                            Address = "Grotelaan 45, Brussels,Belgium",
                            DOB = new DateTime(1997, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2,
                            DoctorId = 3,
                            GenreId = 1,
                            HospitalInfoId = 1,
                            Name = "Ahmed",
                            Nationality = "Belgie"
                        },
                        new
                        {
                            Id = 13,
                            Address = "Zuidstation 36, Brussels,Belgium",
                            DOB = new DateTime(1997, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1,
                            DoctorId = 4,
                            GenreId = 2,
                            HospitalInfoId = 1,
                            Name = "Arijs",
                            Nationality = "Belgie"
                        },
                        new
                        {
                            Id = 14,
                            Address = "Tournailaan 45, Tournai,Belgium",
                            DOB = new DateTime(1991, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 5,
                            DoctorId = 5,
                            GenreId = 2,
                            HospitalInfoId = 1,
                            Name = "Madalina",
                            Nationality = "Romania"
                        },
                        new
                        {
                            Id = 15,
                            Address = "Leuvenlaan 45, Leuven,Belgium",
                            DOB = new DateTime(1999, 4, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2,
                            DoctorId = 6,
                            GenreId = 1,
                            HospitalInfoId = 1,
                            Name = "Fida",
                            Nationality = "Turkia"
                        },
                        new
                        {
                            Id = 16,
                            Address = "Molenbeeklaan 150, Brussels,Belgium",
                            DOB = new DateTime(1997, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2,
                            DoctorId = 7,
                            GenreId = 1,
                            HospitalInfoId = 1,
                            Name = "Mohamad",
                            Nationality = "Marrokko"
                        },
                        new
                        {
                            Id = 17,
                            Address = "Oplinter 102, Tienen,Belgium",
                            DOB = new DateTime(2008, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 3,
                            DoctorId = 8,
                            GenreId = 2,
                            HospitalInfoId = 1,
                            Name = "Amanda",
                            Nationality = "Belgie"
                        },
                        new
                        {
                            Id = 18,
                            Address = "DiestSesteenweg 111, Diest,Belgium",
                            DOB = new DateTime(2012, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 5,
                            DoctorId = 9,
                            GenreId = 1,
                            HospitalInfoId = 1,
                            Name = "Rolis",
                            Nationality = "Belgie"
                        });
                });

            modelBuilder.Entity("DoctorAppointment.Models.TimeSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AvailAbleTime")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("TimeSlot");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailAbleTime = "9 AM",
                            DoctorId = 1
                        },
                        new
                        {
                            Id = 2,
                            AvailAbleTime = "10 AM",
                            DoctorId = 1
                        },
                        new
                        {
                            Id = 3,
                            AvailAbleTime = "11 AM",
                            DoctorId = 1
                        },
                        new
                        {
                            Id = 4,
                            AvailAbleTime = "12 AM",
                            DoctorId = 1
                        },
                        new
                        {
                            Id = 5,
                            AvailAbleTime = "13 PM",
                            DoctorId = 2
                        },
                        new
                        {
                            Id = 6,
                            AvailAbleTime = "14 PM",
                            DoctorId = 2
                        },
                        new
                        {
                            Id = 7,
                            AvailAbleTime = "15 PM",
                            DoctorId = 2
                        },
                        new
                        {
                            Id = 8,
                            AvailAbleTime = "16 PM",
                            DoctorId = 2
                        },
                        new
                        {
                            Id = 9,
                            AvailAbleTime = "17 PM",
                            DoctorId = 3
                        },
                        new
                        {
                            Id = 10,
                            AvailAbleTime = "18 PM",
                            DoctorId = 3
                        },
                        new
                        {
                            Id = 11,
                            AvailAbleTime = "19 PM",
                            DoctorId = 3
                        },
                        new
                        {
                            Id = 12,
                            AvailAbleTime = "20 PM",
                            DoctorId = 3
                        },
                        new
                        {
                            Id = 13,
                            AvailAbleTime = "9 AM",
                            DoctorId = 4
                        },
                        new
                        {
                            Id = 14,
                            AvailAbleTime = "10 AM",
                            DoctorId = 4
                        },
                        new
                        {
                            Id = 15,
                            AvailAbleTime = "11 AM",
                            DoctorId = 4
                        },
                        new
                        {
                            Id = 16,
                            AvailAbleTime = "12 AM",
                            DoctorId = 4
                        },
                        new
                        {
                            Id = 17,
                            AvailAbleTime = "13 PM",
                            DoctorId = 5
                        },
                        new
                        {
                            Id = 18,
                            AvailAbleTime = "14 PM",
                            DoctorId = 5
                        },
                        new
                        {
                            Id = 19,
                            AvailAbleTime = "15 PM",
                            DoctorId = 5
                        },
                        new
                        {
                            Id = 20,
                            AvailAbleTime = "16 PM",
                            DoctorId = 5
                        },
                        new
                        {
                            Id = 21,
                            AvailAbleTime = "17 PM",
                            DoctorId = 6
                        },
                        new
                        {
                            Id = 22,
                            AvailAbleTime = "18 PM",
                            DoctorId = 6
                        },
                        new
                        {
                            Id = 23,
                            AvailAbleTime = "19 PM",
                            DoctorId = 6
                        },
                        new
                        {
                            Id = 24,
                            AvailAbleTime = "20 PM",
                            DoctorId = 6
                        },
                        new
                        {
                            Id = 25,
                            AvailAbleTime = "9 AM",
                            DoctorId = 7
                        },
                        new
                        {
                            Id = 26,
                            AvailAbleTime = "10 AM",
                            DoctorId = 7
                        },
                        new
                        {
                            Id = 27,
                            AvailAbleTime = "11 AM",
                            DoctorId = 7
                        },
                        new
                        {
                            Id = 28,
                            AvailAbleTime = "12 AM",
                            DoctorId = 7
                        },
                        new
                        {
                            Id = 29,
                            AvailAbleTime = "13 PM",
                            DoctorId = 8
                        },
                        new
                        {
                            Id = 30,
                            AvailAbleTime = "14 PM",
                            DoctorId = 8
                        },
                        new
                        {
                            Id = 31,
                            AvailAbleTime = "15 PM",
                            DoctorId = 8
                        },
                        new
                        {
                            Id = 32,
                            AvailAbleTime = "16 PM",
                            DoctorId = 8
                        },
                        new
                        {
                            Id = 33,
                            AvailAbleTime = "17 PM",
                            DoctorId = 9
                        },
                        new
                        {
                            Id = 34,
                            AvailAbleTime = "18 PM",
                            DoctorId = 9
                        },
                        new
                        {
                            Id = 35,
                            AvailAbleTime = "19 PM",
                            DoctorId = 9
                        },
                        new
                        {
                            Id = 36,
                            AvailAbleTime = "20 PM",
                            DoctorId = 9
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DoctorAppointment.Models.Appointment", b =>
                {
                    b.HasOne("DoctorAppointment.Models.DateSlot", "DateSlot")
                        .WithMany("Appointments")
                        .HasForeignKey("DateSlotId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DoctorAppointment.Models.Doctor", "Doctor")
                        .WithMany("Appointment")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DoctorAppointment.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DoctorAppointment.Models.TimeSlot", "TimeSlot")
                        .WithMany("Appointments")
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DateSlot");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("DoctorAppointment.Models.Contact", b =>
                {
                    b.HasOne("DoctorAppointment.Models.HospitalInfo", "Hospital")
                        .WithMany("Contacts")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("DoctorAppointment.Models.DateSlot", b =>
                {
                    b.HasOne("DoctorAppointment.Models.Doctor", "Doctor")
                        .WithMany("DateSlots")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("DoctorAppointment.Models.Department", b =>
                {
                    b.HasOne("DoctorAppointment.Models.HospitalInfo", "HospitalInfo")
                        .WithMany("Departments")
                        .HasForeignKey("HospitalInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HospitalInfo");
                });

            modelBuilder.Entity("DoctorAppointment.Models.Doctor", b =>
                {
                    b.HasOne("DoctorAppointment.Models.Department", "Department")
                        .WithMany("Doctors")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DoctorAppointment.Models.Genre", "Genre")
                        .WithMany("Doctors")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DoctorAppointment.Models.HospitalInfo", "HospitalInfo")
                        .WithMany("Doctors")
                        .HasForeignKey("HospitalInfoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Genre");

                    b.Navigation("HospitalInfo");
                });

            modelBuilder.Entity("DoctorAppointment.Models.HospitalInfo", b =>
                {
                    b.HasOne("DoctorAppointment.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("DoctorAppointment.Models.Patient", b =>
                {
                    b.HasOne("DoctorAppointment.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorAppointment.Models.Doctor", "Doctor")
                        .WithMany("Patients")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorAppointment.Models.Genre", "Genre")
                        .WithMany("Patients")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DoctorAppointment.Models.HospitalInfo", "HospitalInfo")
                        .WithMany("Patients")
                        .HasForeignKey("HospitalInfoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Doctor");

                    b.Navigation("Genre");

                    b.Navigation("HospitalInfo");
                });

            modelBuilder.Entity("DoctorAppointment.Models.TimeSlot", b =>
                {
                    b.HasOne("DoctorAppointment.Models.Doctor", "Doctor")
                        .WithMany("TimeSlots")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DoctorAppointment.Models.DateSlot", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("DoctorAppointment.Models.Department", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("DoctorAppointment.Models.Doctor", b =>
                {
                    b.Navigation("Appointment");

                    b.Navigation("DateSlots");

                    b.Navigation("Patients");

                    b.Navigation("TimeSlots");
                });

            modelBuilder.Entity("DoctorAppointment.Models.Genre", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("DoctorAppointment.Models.HospitalInfo", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Departments");

                    b.Navigation("Doctors");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("DoctorAppointment.Models.Patient", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("DoctorAppointment.Models.TimeSlot", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
